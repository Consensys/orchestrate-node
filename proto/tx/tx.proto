syntax = "proto3";

import "pkg/types/error/error.proto";
import "pkg/types/ethereum/receipt.proto";
import "pkg/types/ethereum/transaction.proto";

option go_package = "github.com/consensys/orchestrate/pkg/types/tx";

package tx;

message TxRequest {
    // Technical header (optional)
    map<string, string> headers = 1;

    // Name of the Chain as registered on the chain registry
    // e.g. 1 for mainnet, 3 for Ropsten
    string chain = 2;

    // Type of a protocol that should be used
    Method method = 3;

    // Params for the transaction
    Params params = 4;

    // ID of the Request in UUID RFC 4122, ISO/IEC 9834-8:2005 format
    // e.g a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
    string id = 5;

    // [option]
    map<string, string> context_labels = 6;

    // Type of the job
    JobType jobType = 7;
}

message TxEnvelope {
    oneof msg {
        TxRequest tx_request = 2;
        TxResponse tx_response = 3;
    }

    map<string, string> internal_labels = 1;
}

enum Method {
    // Classic Ethereum Transaction
    ETH_SENDRAWTRANSACTION = 0;

    // Quorum Constellation
    ETH_SENDPRIVATETRANSACTION = 1;

    // Quorum Tessera
    ETH_SENDRAWPRIVATETRANSACTION = 2;

    // Besu EEA
    EEA_SENDPRIVATETRANSACTION = 3;
}

enum JobType {
    ETH_TX = 0;
    ETH_RAW_TX = 1;
    ETH_EEA_MARKING_TX = 2;
    ETH_EEA_PRIVATE_TX = 3;
    ETH_TESSERA_MARKING_TX = 4;
    ETH_TESSERA_PRIVATE_TX = 5;
}

message Params {
    // Sender of the transaction - Ethereum Account Address
    // e.g 0xAf84242d70aE9D268E2bE3616ED497BA28A7b62C
    string from = 1;

    // The address of the receiver. null when itâ€™s a contract creation transaction.
    // e.g. 0xAf84242d70aE9D268E2bE3616ED497BA28A7b62C
    string to = 2;

    // Integer of the gas provided for the transaction execution.
    string gas = 4;

    // Integer of the gas price used for each paid gas.
    // e.g 0xaf23b
    string gas_price = 5;

    string gas_fee_cap = 6;

    string gas_tip_cap = 7;

    // Integer of the value sent with this transaction.
    // e.g 0xaf23
    string value = 8;

    // Integer of a nonce.
    string nonce = 9;

    // Hash of the method signature (4 bytes) followed by encoded parameters.
    // e.g 0xa9059cbb000000000000000000000000ff778b716fc07d98839f48ddb88d8be583beb684000000000000000000000000000000000000000000000000002386f26fc10000
    string data = 10;

    string transaction_type = 11;

    repeated ethereum.AccessTuple access_list = 12;

    // The signed, RLP encoded transaction
    string raw = 13;

    //***********
    // ADDITIONAL CONTRACT FIELD DATA
    //***********
    // Contract identifier
    // e.g. "ERC20[v1.0.0]"
    string contract = 14;

    // Signature of the method to call on contract
    // e.g "transfer(address,uint256)"
    string method_signature = 15;

    // Arguments to feed on transaction call
    repeated string args = 16;

    //***********
    // PRIVATE ONLY FIELDS
    //***********
    repeated string private_for = 17;

    string private_from = 18;

    string private_tx_type = 19;

    string privacy_group_id = 20;

    repeated string mandatory_for = 21;

    int32 privacy_flag = 22;
}

message TxResponse {
    // Extra information (optional)
    map<string, string> headers = 1;

    // ID of the Response in UUID RFC 4122, ISO/IEC 9834-8:2005 format
    // e.g a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
    string id = 2;

    // ID of the Job created as part of transaction request
    // e.g 15276759-bbc6-4ead-ad51-ddfecf79cf09
    string jobUUID = 8;

    // [option]
    map<string, string> context_labels = 3;

    ethereum.Transaction transaction = 4;
    ethereum.Receipt receipt = 5;
    // Name of the Chain as registered on the chain registry
    // e.g. 1 for mainnet, 3 for Ropsten
    string chain = 7;

    repeated error.Error errors = 6;
}
