syntax = "proto3";

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "types/abi/abi.proto";
import "types/common/account_instance.proto";


option go_package = "github.com/consensys/orchestrate/types/contract-registry";

package contractregistry;

// Registry is a gRPC service responsible for registering Contracts
service ContractRegistry {
    // Register a contract
    rpc RegisterContract (RegisterContractRequest) returns (RegisterContractResponse);
    // DeregisterContract remove the name + tag association to a contract artifact (abi, bytecode, deployedBytecode). Artifacts are not deleted.
    rpc DeregisterContract (DeregisterContractRequest) returns (DeregisterContractResponse);
    // DeleteArtifact delete a contract artifact (abi, bytecode, deployedBytecode).
    rpc DeleteArtifact (DeleteArtifactRequest) returns (DeleteArtifactResponse);
    // Retrieve contract
    rpc GetContract (GetContractRequest) returns (GetContractResponse) {
        option (google.api.http) = {
            get: "/contracts/{contractId.name}/{contractId.tag}"
        };
    }

    // Retrieve contract ABI
    rpc GetContractABI (GetContractRequest) returns (GetContractABIResponse) {
        option (google.api.http) = {
            get: "/contracts/{contractId.name}/{contractId.tag}/abi"
        };
    }

    // Returns the bytecode
    rpc GetContractBytecode (GetContractRequest) returns (GetContractBytecodeResponse) {
        option (google.api.http) = {
            get: "/contracts/{contractId.name}/{contractId.tag}/bytecode"
        };
    }

    // Returns the deployed bytecode
    rpc GetContractDeployedBytecode (GetContractRequest) returns (GetContractDeployedBytecodeResponse) {
        option (google.api.http) = {
            get: "/contracts/{contractId.name}/{contractId.tag}/deployedBytecode"
        };
    }

    // Returns a list of all registered contracts
    rpc GetCatalog (GetCatalogRequest) returns (GetCatalogResponse) {
        option (google.api.http) = {
            get: "/contracts"
        };
    }

    // Returns a list of all tags associated to a contract
    rpc GetTags (GetTagsRequest) returns (GetTagsResponse) {
        option (google.api.http) = {
            get: "/contracts/{name}"
        };
    }

    // Retrieve methods using 4 bytes unique selector
    rpc GetMethodsBySelector (GetMethodsBySelectorRequest) returns (GetMethodsBySelectorResponse);
    // Retrieve events using hash of signature
    rpc GetEventsBySigHash (GetEventsBySigHashRequest) returns (GetEventsBySigHashResponse);

    // Set the codeHash of the given account
    rpc SetAccountCodeHash (SetAccountCodeHashRequest) returns (SetAccountCodeHashResponse);
}

// Register
message RegisterContractRequest {
    // Contract to register
    abi.Contract contract = 1;
}
message RegisterContractResponse {
}


message DeregisterContractRequest {
    // Contract to register
    abi.ContractId contractId = 1;
}
message DeregisterContractResponse {
}


message DeleteArtifactRequest {
    // Hash of the bytecode pointing to an artifact to delete
    string bytecodeHash = 1;
}
message DeleteArtifactResponse {
}

// Getters
message GetContractRequest {
    abi.ContractId contractId = 1;
}

message GetContractResponse {
    abi.Contract contract = 1;
}

message GetContractABIResponse {
    string abi = 1;
}

message GetContractBytecodeResponse {
    string bytecode = 1;
}

message GetContractDeployedBytecodeResponse {
    string deployedBytecode = 1;
}


message GetCatalogRequest {
}
message GetCatalogResponse {
    repeated string names = 1;
}


message GetTagsRequest {
    // Name is used to filter contractIds based on their contract name, empty to list all contract names & tags.
    string name = 1;
}
message GetTagsResponse {
    repeated string tags = 1;
}


message GetMethodsBySelectorRequest {
    // Method selector
    bytes selector = 1;

    // Chain & Address of the contract
    common.AccountInstance accountInstance = 2;
}
message GetMethodsBySelectorResponse {
    // Contains the ABI of the exact method if the deployed contract has a known bytecode
    string method = 1;
    // Contains the ABIs of the potential methods(s) if the deployed contract is not known
    repeated string defaultMethods = 2;
}

message GetEventsBySigHashRequest {
    // Event signature hash (aka: topic[0])
    string sigHash = 1;

    // Chain & Address of the contract
    common.AccountInstance accountInstance = 2;

    // Count of indexed inputs in event abi
    uint32 indexedInputCount = 3;
}
message GetEventsBySigHashResponse {
    // Contains the ABI of the exact event if the deployed contract has a known bytecode
    string event = 1;
    // Contains the ABIs of the potential event(s) if the deployed contract is not known
    repeated string defaultEvents = 2;
}

// Update
message SetAccountCodeHashRequest {
    // Chain & address of the account to update
    common.AccountInstance accountInstance = 1;

    string codeHash = 2;
}
message SetAccountCodeHashResponse {
}
